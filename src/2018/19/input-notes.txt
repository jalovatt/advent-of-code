     #ip 4
*    0 | addi 4 16 4      ip = 16                             ip = 17
     1 | seti 1  X 2      s[2] = 1
     2 | seti 1  X 5      s[5] = 1                                                  do {
     3 | mulr 2  5 3      s[3] = s[2] * s[5]                                          s[5] = 1;
                                                                                      do {
     4 | eqrr 3  1 3      s[3] = (s[3] === s[1]) ? 1 : 0                                if (s[2] * s[5] === s[1]) {
*    5 | addr 3  4 4      ip += s[3]                          ip = ip + s[3] + 1          s[0] += s[2]
*    6 | addi 4  1 4      ip += 1                             ip = 8                    }
     7 | addr 2  0 0      s[0] += s[2]
     8 | addi 5  1 5      s[5] += 1                                                     s[5] += 1
     9 | gtrr 5  1 3      s[3] = (s[5] > s[1]) ? 1 : 0                                } while (s[5] <= s[1])
*   10 | addr 4  3 4      ip += s[3]                          ip = ip + s[3] + 1
*   11 | seti 2  X 4      ip = 2                              ip = 3
    12 | addi 2  1 2      s[2] += 1                                                   s[2] += 1
    13 | gtrr 2  1 3      s[3] = (s[2] > s[1]) ? 1 : 0                              } while (s[2] <= s[1])
*   14 | addr 3  4 4      ip += s[3]                          ip = ip + s[3] + 1
*   15 | seti 1  X 4      ip = 1                              ip = 2
*   16 | mulr 4  4 4      ip *= ip                            EXIT


    17 | addi 1  2 1      s[1] += 2
    18 | mulr 1  1 1      s[1] *= s[1]
    19 | mulr 4  1 1      s[1] *= ip
    20 | muli 1 11 1      s[1] *= 11
    21 | addi 3  3 3      s[3] += 3
    22 | mulr 3  4 3      s[3] *= ip
    23 | addi 3  9 3      s[3] += 9
    24 | addr 1  3 1      s[1] + s[3]


*   25 | addr 4  0 4      ip += s[0]                          ip = ip + s[0] + 1
*   26 | seti 0  X 4      ip = 0                              ip = 1


    27 | setr 4  X 3      s[3] = ip
    28 | mulr 3  4 3      s[3] *= ip
    29 | addr 4  3 3      s[3] += ip
    30 | mulr 4  3 3      s[3] *= ip
    31 | muli 3 14 3      s[3] *= 14
    32 | mulr 3  4 3      s[3] *= ip
    33 | addr 1  3 1      s[1] += s[3]
    34 | seti 0  X 0      s[0] = 0


*   35 | seti 0  X 4      ip = 0                              ip = 1

do {
  do {
    s[5] = 1

    if (s[2] * s[5] === s[1]) {
      s[0] += s[2]
    }

    s[5] += 1
  } while (s[5] <= s[1])

  s[2] += 1
} while (s[2] <= s[1])

-->

for s[2] = 1..s[1]
  for s[5] = 1..s[1]
    if s[2] * s[5] === s[1]
      s[2] is a factor of s[1] -> s[0] += s[2]

s[0] = sum of all factors of s[1]
